// Code generated by counterfeiter. DO NOT EDIT.
package foofakes

import (
	"counterfeiterTest/foo"
	"sync"
)

type FakeMySpecialInterface1 struct {
	DoThings1Stub        func(string, uint64) (int, error)
	doThings1Mutex       sync.RWMutex
	doThings1ArgsForCall []struct {
		arg1 string
		arg2 uint64
	}
	doThings1Returns struct {
		result1 int
		result2 error
	}
	doThings1ReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMySpecialInterface1) DoThings1(arg1 string, arg2 uint64) (int, error) {
	fake.doThings1Mutex.Lock()
	ret, specificReturn := fake.doThings1ReturnsOnCall[len(fake.doThings1ArgsForCall)]
	fake.doThings1ArgsForCall = append(fake.doThings1ArgsForCall, struct {
		arg1 string
		arg2 uint64
	}{arg1, arg2})
	stub := fake.DoThings1Stub
	fakeReturns := fake.doThings1Returns
	fake.recordInvocation("DoThings1", []interface{}{arg1, arg2})
	fake.doThings1Mutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMySpecialInterface1) DoThings1CallCount() int {
	fake.doThings1Mutex.RLock()
	defer fake.doThings1Mutex.RUnlock()
	return len(fake.doThings1ArgsForCall)
}

func (fake *FakeMySpecialInterface1) DoThings1Calls(stub func(string, uint64) (int, error)) {
	fake.doThings1Mutex.Lock()
	defer fake.doThings1Mutex.Unlock()
	fake.DoThings1Stub = stub
}

func (fake *FakeMySpecialInterface1) DoThings1ArgsForCall(i int) (string, uint64) {
	fake.doThings1Mutex.RLock()
	defer fake.doThings1Mutex.RUnlock()
	argsForCall := fake.doThings1ArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMySpecialInterface1) DoThings1Returns(result1 int, result2 error) {
	fake.doThings1Mutex.Lock()
	defer fake.doThings1Mutex.Unlock()
	fake.DoThings1Stub = nil
	fake.doThings1Returns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeMySpecialInterface1) DoThings1ReturnsOnCall(i int, result1 int, result2 error) {
	fake.doThings1Mutex.Lock()
	defer fake.doThings1Mutex.Unlock()
	fake.DoThings1Stub = nil
	if fake.doThings1ReturnsOnCall == nil {
		fake.doThings1ReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.doThings1ReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeMySpecialInterface1) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.doThings1Mutex.RLock()
	defer fake.doThings1Mutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMySpecialInterface1) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ foo.MySpecialInterface1 = new(FakeMySpecialInterface1)
